import React, {
	useEffect,
	useState,
	useRef,
} from 'react';
import {
	useParams,
	useLocation,
} from 'react-router-dom';
import secrets from '../../secrets.js';
import styles from '../Styles/Meeting.module.scss';
import { ZegoUIKitPrebuilt } from '@zegocloud/zego-uikit-prebuilt';
import { v4 as uuidv4 } from 'uuid';
import { BsTranslate } from 'react-icons/bs';
import { BiCaptions } from 'react-icons/bi';
import { BsCcCircle } from 'react-icons/bs';
import { BsStars } from 'react-icons/bs';
import { Modal, Switch } from 'antd';
import {
	CheckOutlined,
	CloseOutlined,
} from '@ant-design/icons';
import { showToast } from '../Utils/toast.js';

const Meeting = () => {
	const { APP_ID, APP_SECRET } = secrets;
	const { id } = useParams();
	const location = useLocation();

	const [itemVisible, setItemVisible] = useState(
		'Media Devices'
	);

	const [roomState, setRoomState] = useState(
		'pre-meeting'
	);

	const streamRef = useRef(null);

	const [settingsConfig, setSettingsConfig] =
		useState({
			isCaptionsEnabled: false,
			isTranslationEnabled: false,
			speakerLanguage: 'English',
		});

	const [modalWidth, setModalWidth] =
		useState('50%');

	const handleOk = () => {
		setIsModalOpen(false);
		leaveRoom();
	};

	useEffect(() => {
		const getWindowWidth = () => {
			setModalWidth(
				window.innerWidth < 768 ? '100%' : '50%'
			);
		};
		getWindowWidth();
		window.addEventListener(
			'resize',
			getWindowWidth
		);
		return () => {
			window.removeEventListener(
				'resize',
				getWindowWidth
			);
		};
	}, []);

	const [isSettingsVisible, setIsSettingsVisible] =
		useState(false);

	const [audioStream, setAudioStream] = useState(
		new MediaStream()
	);

	const name =
		location.state?.data?.user?.name ??
		'Guest User';

	const MeetingComp = async (element) => {
		const appId = Number(APP_ID);
		const server = APP_SECRET.toString();
		const userID = uuidv4();
		const kitToken =
			ZegoUIKitPrebuilt.generateKitTokenForTest(
				appId,
				server,
				id,
				userID,
				name
			);
		const zc = ZegoUIKitPrebuilt.create(kitToken);
		streamRef.current = zc.localStream;

		zc.joinRoom({
			container: element,
			scenario: {
				mode: ZegoUIKitPrebuilt.OneONoneCall,
			},
		});
	};

	useEffect(() => {
		if (MeetingComp.current) {
			initializeMeeting(MeetingComp.current);
		}
	}, []);

	useEffect(() => {
		if (streamRef.current) {
			console.log(
				'StreamRef updated:',
				streamRef.current
			);
		}
	}, [streamRef.current]);

	const Settings = ({
		settingsConfig,
		isCaptionsEnabled,
		isTranslationEnabled,
		speakerLanguage,
	}) => {
		const leftItems = [
			{
				title: 'Captions',
				icon: <BsCcCircle />,
			},
			{
				title: 'Translation',
				icon: <BsTranslate />,
			},
		];

		return (
			<div className={styles.modalSettings}>
				<div className={styles.left}>
					<h2>Settings</h2>
					<div className={styles.itemWrapper}>
						{leftItems.map((item, index) => {
							return (
								<div
									key={index}
									className={`${styles.item} ${
										itemVisible === item.title
											? styles.focused
											: ''
									}`}
									onClick={() => {
										setItemVisible(item.title);
									}}
								>
									{item.icon}
									<p>{item.title}</p>
									{item.title == 'Translation' && (
										<BsStars />
									)}
								</div>
							);
						})}
					</div>
				</div>
				<div className={styles.right}>
					<h2>{itemVisible}</h2>
					{itemVisible === 'Captions' ? (
						<div className={styles.rightItem}>
							<div className={styles.capitonWrapper}>
								<div className={styles.info}>
									<h3>Enable Realtime Captions</h3>
									<p>
										Realtime captions are generated by
										identifying the speech in the audio
										stream and converting it to text
										<br />{' '}
										<b>
											(Supports English & Hindi Languages
											only).
										</b>
									</p>
								</div>
								<Switch
									className={styles.switch}
									checkedChildren={<CheckOutlined />}
									unCheckedChildren={<CloseOutlined />}
									defaultChecked={
										settingsConfig.isCaptionsEnabled
									}
									onChange={(checked) => {
										console.log(checked);
										if (checked) {
											showToast(
												'Captions Enabled',
												'success'
											);
											isCaptionsEnabled(true);
										} else {
											showToast(
												'Captions Disabled',
												'success'
											);
											isCaptionsEnabled(false);
										}
									}}
								/>
							</div>
						</div>
					) : itemVisible === 'Translation' ? (
						<div className={styles.rightItem}>
							<div className={styles.translationWrapper}>
								<div className={styles.headingWrapper}>
									<div className={styles.heading}>
										<h3>Enable Live Translation</h3>
										<p>
											Live translation is powered by Vocalize
											Powerful Machine Learning Model that
											translates the speech in real-time to
											the selected language.
										</p>
									</div>
									<Switch
										className={styles.switch}
										checkedChildren={<CheckOutlined />}
										unCheckedChildren={<CloseOutlined />}
										defaultChecked={
											settingsConfig.isTranslationEnabled
										}
										onChange={(checked) => {
											console.log(checked);
											if (checked) {
												showToast(
													'Translation Enabled',
													'success'
												);
												isTranslationEnabled(true);
											} else {
												showToast(
													'Translation Disabled',
													'success'
												);
												isTranslationEnabled(false);
											}
										}}
									/>
								</div>
								<div className={styles.optionsWrapper}>
									<div className={styles.languageSelector}>
										<p>Speaker is talking in : </p>
										<select
											name=''
											id=''
											value={settingsConfig.speakerLanguage}
											onChange={(e) => {
												if (e.target.value === 'Hindi') {
													speakerLanguage('Hindi');
												} else {
													speakerLanguage('English');
												}
											}}
										>
											<option value='English'>
												English
											</option>
											<option value='Hindi'>Hindi</option>
										</select>
									</div>
									<div className={styles.languageSelector}>
										<p>I want to listen in : </p>
										<select
											name=''
											id=''
											value={
												settingsConfig.speakerLanguage ==
												'English'
													? 'Hindi'
													: 'English'
											}
											onChange={(e) => {
												if (e.target.value === 'Hindi') {
													speakerLanguage('English');
												} else {
													speakerLanguage('Hindi');
												}
											}}
										>
											<option value='English'>
												English
											</option>
											<option value='Hindi'>Hindi</option>
										</select>
									</div>
								</div>
							</div>
						</div>
					) : null}
				</div>
			</div>
		);
	};

	return (
		<div className={styles.main}>
			<Modal
				title={null}
				open={isSettingsVisible}
				onOk={handleOk}
				onCancel={() => {
					setIsSettingsVisible(false);
				}}
				closable={true}
				centered
				footer={null}
				width={modalWidth}
			>
				<Settings
					settingsConfig={settingsConfig}
					selectMic={(data) => {
						setSettingsConfig((prevConfig) => ({
							...prevConfig,
							selectedAudioDevice: data,
						}));
					}}
					selectVideo={(data) => {
						setSettingsConfig((prevConfig) => ({
							...prevConfig,
							selectedVideoDevice: data,
						}));
					}}
					selectSpeaker={(data) => {
						setSettingsConfig((prevConfig) => ({
							...prevConfig,
							selectedAudioOutputDevice: data,
						}));
					}}
					isCaptionsEnabled={(data) => {
						setSettingsConfig((prevConfig) => ({
							...prevConfig,
							isCaptionsEnabled: data,
						}));
						setControls((prevControls) => ({
							...prevControls,
							isCaptionsEnabled: data,
						}));
					}}
					isTranslationEnabled={(data) => {
						setSettingsConfig((prevConfig) => ({
							...prevConfig,
							isTranslationEnabled: data,
						}));
						setControls((prevControls) => ({
							...prevControls,
							isTranslationEnabled: data,
						}));
					}}
					speakerLanguage={(data) => {
						setSettingsConfig((prevConfig) => ({
							...prevConfig,
							speakerLanguage: data,
						}));
					}}
				/>
			</Modal>
			<div
				ref={MeetingComp}
				onContextMenu={(e) => {
					e.preventDefault();
				}}
			/>
			{settingsConfig.isCaptionsEnabled && (
				<div className={styles.captions}>
					<p>
						Lorem ipsum dolor sit, amet consectetur
						adipisicing elit. Dignissimos quibusdam
						aliquam cum blanditiis, amet vero at facilis
						natus aut deleniti sapiente eius aliquid
						quo. Molestias, harum consequuntur est esse
						ducimus quo fugit fugiat labore quisquam
						architecto veritatis cupiditate impedit? Sed
						magni voluptate vel repudiandae sapiente.
					</p>
				</div>
			)}

			<div className={styles.settingsOverlay}>
				<div
					className={styles.button}
					onClick={() => {
						setIsSettingsVisible(true);
						setItemVisible('Translation');
					}}
				>
					<BsTranslate />
					{settingsConfig.isTranslationEnabled && (
						<div className={styles.dot}></div>
					)}
				</div>
				<div
					className={styles.button}
					onClick={() => {
						setIsSettingsVisible(true);
						setItemVisible('Captions');
					}}
				>
					<BiCaptions />
					{settingsConfig.isCaptionsEnabled && (
						<div className={styles.dot}></div>
					)}
				</div>
			</div>
		</div>
	);
};

export default Meeting;
